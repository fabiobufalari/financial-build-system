var l=Object.defineProperty;var d=(r,e,t)=>e in r?l(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t;var i=(r,e,t)=>d(r,typeof e!="symbol"?e+"":e,t);import{S as m,D as s,a as n}from"./index-DXA_vukq.js";const p=()=>[{id:"emp-001",firstName:"João",lastName:"Silva",email:"joao.silva@bufalari.com",phone:"+55 11 99999-1111",position:"Engenheiro Civil",department:"Engenharia",salary:8500,hireDate:"2023-01-15",status:"ACTIVE",employeeId:"EMP001",address:{street:"Rua das Flores",number:"123",neighborhood:"Jardim Paulista",city:"São Paulo",state:"SP",zipCode:"01234-567",country:"Brasil"},emergencyContact:{name:"Maria Silva",relationship:"Esposa",phone:"+55 11 88888-1111"},documents:{cpf:"123.456.789-01",rg:"12.345.678-9"},benefits:["Plano de Saúde","Vale Refeição","Vale Transporte"],createdAt:"2023-01-15T09:00:00Z",updatedAt:"2025-06-15T14:30:00Z"},{id:"emp-002",firstName:"Ana",lastName:"Santos",email:"ana.santos@bufalari.com",phone:"+55 11 99999-2222",position:"Arquiteta",department:"Projetos",salary:7500,hireDate:"2023-03-20",status:"ACTIVE",employeeId:"EMP002",address:{street:"Avenida Paulista",number:"456",complement:"Apto 101",neighborhood:"Bela Vista",city:"São Paulo",state:"SP",zipCode:"01310-100",country:"Brasil"},emergencyContact:{name:"Carlos Santos",relationship:"Pai",phone:"+55 11 88888-2222"},documents:{cpf:"987.654.321-01",rg:"98.765.432-1"},benefits:["Plano de Saúde","Vale Refeição"],createdAt:"2023-03-20T10:30:00Z",updatedAt:"2025-06-10T16:45:00Z"},{id:"emp-003",firstName:"Pedro",lastName:"Oliveira",email:"pedro.oliveira@bufalari.com",phone:"+55 11 99999-3333",position:"Mestre de Obras",department:"Produção",salary:5500,hireDate:"2022-08-10",status:"ACTIVE",employeeId:"EMP003",address:{street:"Rua dos Trabalhadores",number:"789",neighborhood:"Vila Operária",city:"São Paulo",state:"SP",zipCode:"03456-789",country:"Brasil"},emergencyContact:{name:"Lucia Oliveira",relationship:"Mãe",phone:"+55 11 88888-3333"},documents:{cpf:"456.789.123-01",rg:"45.678.912-3"},benefits:["Vale Refeição","Vale Transporte"],createdAt:"2022-08-10T08:00:00Z",updatedAt:"2025-06-05T12:20:00Z"}];class c{constructor(){i(this,"baseUrl",m.employees);i(this,"demoData",p())}async getAllEmployees(e,t){try{if(s)return this.demoGetAllEmployees(e,t);let a=this.baseUrl;const o=new URLSearchParams;return e&&o.append("department",e),t&&o.append("status",t),o.toString()&&(a+=`?${o.toString()}`),(await n.get(a)).data}catch(a){return console.warn("Real API failed, falling back to demo mode:",a),this.demoGetAllEmployees(e,t)}}async getEmployeeById(e){try{return s?this.demoGetEmployeeById(e):(await n.get(`${this.baseUrl}/${e}`)).data}catch(t){return console.warn("Real API failed, falling back to demo mode:",t),this.demoGetEmployeeById(e)}}async createEmployee(e){try{return s?this.demoCreateEmployee(e):(await n.post(this.baseUrl,e)).data}catch(t){return console.warn("Real API failed, falling back to demo mode:",t),this.demoCreateEmployee(e)}}async updateEmployee(e,t){try{return s?this.demoUpdateEmployee(e,t):(await n.put(`${this.baseUrl}/${e}`,t)).data}catch(a){return console.warn("Real API failed, falling back to demo mode:",a),this.demoUpdateEmployee(e,t)}}async deleteEmployee(e){try{if(s)return this.demoDeleteEmployee(e);await n.delete(`${this.baseUrl}/${e}`)}catch(t){return console.warn("Real API failed, falling back to demo mode:",t),this.demoDeleteEmployee(e)}}async searchEmployees(e){try{return s?this.demoSearchEmployees(e):(await n.get(`${this.baseUrl}/search?q=${encodeURIComponent(e)}`)).data}catch(t){return console.warn("Real API failed, falling back to demo mode:",t),this.demoSearchEmployees(e)}}async getEmployeesByDepartment(e){return this.getAllEmployees(e)}async demoGetAllEmployees(e,t){await new Promise(o=>setTimeout(o,500));let a=[...this.demoData];return e&&(a=a.filter(o=>o.department===e)),t&&(a=a.filter(o=>o.status===t)),a}async demoGetEmployeeById(e){await new Promise(a=>setTimeout(a,300));const t=this.demoData.find(a=>a.id===e);if(!t)throw new Error("Employee not found");return{...t}}async demoCreateEmployee(e){await new Promise(a=>setTimeout(a,800));const t={id:`emp-${Date.now()}`,...e,status:"ACTIVE",createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};return this.demoData.push(t),{...t}}async demoUpdateEmployee(e,t){await new Promise(o=>setTimeout(o,600));const a=this.demoData.findIndex(o=>o.id===e);if(a===-1)throw new Error("Employee not found");return this.demoData[a]={...this.demoData[a],...t,updatedAt:new Date().toISOString()},{...this.demoData[a]}}async demoDeleteEmployee(e){await new Promise(a=>setTimeout(a,400));const t=this.demoData.findIndex(a=>a.id===e);if(t===-1)throw new Error("Employee not found");this.demoData[t].status="TERMINATED",this.demoData[t].updatedAt=new Date().toISOString()}async demoSearchEmployees(e){await new Promise(a=>setTimeout(a,400));const t=e.toLowerCase();return this.demoData.filter(a=>a.firstName.toLowerCase().includes(t)||a.lastName.toLowerCase().includes(t)||a.email.toLowerCase().includes(t)||a.employeeId.toLowerCase().includes(t)||a.position.toLowerCase().includes(t))}}const f=new c;export{f as e};
